#!/usr/bin/perl -w
use strict;
use lib '../lib';
use Config::Std;
use Getopt::Long;
use htx;
use htx::db;
use Pod::Usage;
use Term::Emit qw/:all/;

my $opts = {};
GetOptions($opts, "config-file|c=s", "help|h", "verbose|v") or pod2usage(2);
pod2usage(1) if $opts->{help};

emit "Loading config";
my $htx = {};
read_config $opts->{'config-file'} || $CONFIG_FILE => $htx->{cfg};
emit_done;

connect_db($htx);
do_report($htx);

exit 0;

# Database setup
sub connect_db {
    my $htx = shift;
    my $cfg = $htx->{cfg};
    emit "Connecting to database";

    my $db = $htx->{db} = htx::db->new;

    $db->connect($cfg->{db});
    exit emit_fail {-reason => "Unable to connect to database: " . $db->error}
        if $db->error;
    $db->setup;
    exit emit_fail {-reason => "Unable to setup database: " . $db->error}
        if $db->error;

    emit_done;
}

sub do_report {
    my $htx = shift;
    my $db  = $htx->{db};

    my $y = 2011;
    my $m = 10;
    my $h = 3;
    my $n = 0;
    my $s = 0;

    my $stot = 0;
    my $ttot = 0;

    print "   Date      Scanned    Trolls   Rate/hr    Total \n";
    print "----------   -------   -------   -------   -------\n";

    foreach my $d (1 .. 31) {

        my $from = sprintf('%4.4d-%2.2d-%2.2d %2.2d:%2.2d:%2.2d', $y, $m, $d,     $h, $n, $s);
        my $to   = sprintf('%4.4d-%2.2d-%2.2d %2.2d:%2.2d:%2.2d', $y, $m, $d + 1, $h, $n, $s);

        # Scanned count
        my $sql = qq{SELECT COUNT(*) AS scnt
                       FROM scans k
                      WHERE k.scnTimestamp >  '$from'
                        AND k.scnTimestamp <= '$to'
                        AND scnResult in ('Allowed','ForceAllow')
                        AND scnNumber != 0;
                    };
        my $recs = $db->select($sql);
        exit emit_fail {-reason => "Failed on select: " . $db->error()}
            if $db->error();
        exit emit_fail {-reason => "Expected one result from select"}
            if @$recs != 1;
        my $scnt = $recs->[0]->{scnt} || 0;
        $stot += $scnt;

        # Troll count
        $sql = qq{SELECT COUNT(*) AS tcnt
                       FROM scans k
                      WHERE k.scnTimestamp >  '$from'
                        AND k.scnTimestamp <= '$to'
                        AND scnResult in ('Allowed','ForceAllow')
                        AND scnNumber = 0;
                    };
        $recs = $db->select($sql);
        exit emit_fail {-reason => "Failed on select: " . $db->error()}
            if $db->error();
        exit emit_fail {-reason => "Expected one result from select"}
            if @$recs != 1;
        my $tcnt = $recs->[0]->{tcnt} || 0;
        $ttot += $tcnt;

        printf "%4.4d-%2.2d-%2.2d   %7d   %7d   %7d   %7d\n",
            $y, $m, $d,
            $scnt, $tcnt, 0, $scnt + $tcnt;
    }
    print "----------   -------   -------   -------   -------\n";
    printf ("             %7d   %7d   %7d   %7d\n", $stot, $ttot, 0, $stot + $ttot);
}

__END__

=head1 NAME

htx-report-thruput - HaunTix report of daily thruput counts

=head1 SYNOPSIS

 htx-report-thruput [options]

 Options:
  -h    --help          Usage summary
  -c    --config-file   Alternate config file
  -v    --verbose       Verbose output

=head1 DESCRIPTION

Produces a simple report that shows the daily thruput counts.

=cut

